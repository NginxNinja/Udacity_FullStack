# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "generic/ubuntu1804"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  #
  # Previous forwarded_port settings_2nd take
  # config.vm.network "forwarded_port", guest: 80, host: 80
  # config.vm.network "forwarded_port", guest: 5000, host: 5999, auto_correct: true

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  #
  # Previous forwarded_port settings_Main settings
  config.vm.network "forwarded_port", guest: 80, host: 80, host_ip: "127.0.0.1", auto_correct: true
  config.vm.network "forwarded_port", guest: 8000, host: 8000, host_ip: "127.0.0.1", auto_correct: true
  config.vm.network "forwarded_port", guest: 5000, host: 5001, host_ip: "127.0.0.1", auto_correct: true
  config.vm.network "forwarded_port", guest: 5432, host: 5432, host_ip: "127.0.0.1", auto_correct: true
  config.vm.usable_port_range = 5002..5999

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder ".", "/vagrant"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  config.vm.provider "virtualbox" do |vb|
    vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  #
  # 1st Original Shell scripts with having apt-get parameters of 2 levels of quiet param, and yes param
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt install -y make zip unzip
  #   apt install -y python3.8.*
  #   apt install -y python3-pip
  #   python3.8 -m pip install --upgrade pip
  #   python3 -m pip install --upgrade pip
  #   apt install -y postgresql
  #   apt install --upgrade -y postgresql
  #   apt install -y python3-psycopg2
  #   python3 -m pip install psycopg2
  #   python3.8 -m pip install psycopg2
  #   python3.8 -m pip install flask
  #   python3 -m pip install flask
  #   python3.8 -m pip install flask-sqlalchemy
  #   python3 -m pip install flask-sqlalchemy
  #   apt install -y python3.8-venv
  #   apt install -y python3-venv
  #   python3.8 -m pip install Flask-Migrate
  #   python3 -m pip install Flask-Migrate
  # SHELL

  # Run these commands after running the vagrant provision
  # sudo apt install -y make zip unzip
  # sudo apt install -y python3.8.*
  # sudo apt install -y python3-pip
  # python3.8 -m pip install --upgrade pip
  # python3 -m pip install --upgrade pip
  # sudo apt install -y postgresql
  # sudo apt install --upgrade -y postgresql
  # sudo apt install -y python3-psycopg2
  # python3 -m pip install psycopg2
  # python3.8 -m pip install psycopg2
  # python3.8 -m pip install flask
  # python3 -m pip install flask
  # python3.8 -m pip install flask-sqlalchemy
  # python3 -m pip install flask-sqlalchemy
  # sudo apt install -y python3.8-venv
  # sudo apt install -y python3-venv
  # sudo apt -y update
  # sudo apt -y upgrade
  # sudo apt -y upgrade python3
  # sudo apt -y upgrade python3.8
  # sudo apt -y upgrade postgresql
  # python3.8 -m pip install Flask-Migrate
  # python3 -m pip install Flask-Migrate
  # python3 -m pip install -U flask-cors
  # python3.8 -m pip install -U flask-cors
  # python3 -m pip -r </path/to/requirements.txt>
  # python3 -m pip install bcrypt
  # python -m pip install awscli
  # python -m pip install --upgrade awscli

  # Miscellaneous
  # Run these commands in CLI for the alternative of this method.
  # export FLASK_APP=<filename.py>
  # export FLASK_ENV=development
  # host param can be run in CLI like this => flask run --reload --host=0.0.0.0
  # port param can be run in CLI like this => flask run --reload --port=8080
  #
  # Installing venv folder: python3 -m venv c:\path\to\myenv
  # Running venv: source <venv_folder>/Scripts/activate => For Windows in Git Bash
  # Running venv: source <venv_folder>/bin/activate => For Linux Bash
  # Deactivate cmd in venv: deactivate
  # postman.com => dum.kmn2@g dum.kmn2
  # auth0.com => dum.kmn2@g kP2 => dev-r1u0u-k2.auth0.com
  # aws dum.ken2 Wc1
end